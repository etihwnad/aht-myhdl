// File: Chain0Ctl.v
// Generated by MyHDL 0.7
// Date: Wed Jul  6 20:49:52 2011


`timescale 1ns/10ps

module Chain0Ctl (
    reset,
    scl,
    cs,
    din,
    dout,
    txAn,
    txAp,
    txBn,
    txBp,
    swAn,
    swAp,
    swBn,
    swBp,
    fastAn,
    fastAp,
    fastBn,
    fastBp,
    tuneAn,
    tuneAp,
    tuneBn,
    tuneBp
);
// Harmonic chain 0 multiplexer and pad buffer control
// 
// Inputs:
// reset   - reset SPI register
// scl     - SPI SCLK
// cs      - SPI CS
// din     - SPI MOSI
// 
// Outputs:
// dout    - SPI MISO
// txXn    - one-hot mux A/B NMOS control
// txXn    - one-cold mux A/B PMOS control
// swXn    - buffer A/B mode NMOS switches
// swXp    - buffer A/B mode PMOS switches
// fastXn  - buffer A/B gm config
// fastXp  - buffer A/B gm config
// tuneXn  - IDAC A/B switches
// tuneXp  - IDAC A/B complementary switches

input reset;
input scl;
input cs;
input din;
output dout;
wire dout;
output [48:0] txAn;
wire [48:0] txAn;
output [48:0] txAp;
wire [48:0] txAp;
output [48:0] txBn;
wire [48:0] txBn;
output [48:0] txBp;
wire [48:0] txBp;
output [3:0] swAn;
wire [3:0] swAn;
output [3:0] swAp;
wire [3:0] swAp;
output [3:0] swBn;
wire [3:0] swBn;
output [3:0] swBp;
wire [3:0] swBp;
output fastAn;
wire fastAn;
output fastAp;
wire fastAp;
output fastBn;
wire fastBn;
output fastBp;
wire fastBp;
output [11:0] tuneAn;
wire [11:0] tuneAn;
output [11:0] tuneAp;
wire [11:0] tuneAp;
output [11:0] tuneBn;
wire [11:0] tuneBn;
output [11:0] tuneBp;
wire [11:0] tuneBp;

reg [48:0] tBp;
reg [48:0] tBn;
reg [47:0] cdata;
reg [3:0] sB;
reg [3:0] sA;
reg [48:0] tAp;
reg [48:0] tAn;
reg [48:0] muxB_x;
reg [48:0] muxA_x;
reg spiSlave_sample;
reg [47:0] spiSlave_reg;





always @(cdata[16-1:13]) begin: CHAIN0CTL_BUFSWCTLB_LOGIC
    case (cdata[16-1:13])
        0: sB = 10;
        1: sB = 10;
        2: sB = 9;
        3: sB = 9;
        4: sB = 6;
        5: sB = 6;
        6: sB = 5;
        default: sB = 5;
    endcase
end


always @(posedge cs) begin: CHAIN0CTL_SPISLAVE_CHIPSELECT
    if ((cs == 1)) begin
        cdata <= spiSlave_reg;
    end
end


always @(negedge scl, negedge reset) begin: CHAIN0CTL_SPISLAVE_INPUTREGISTER
    if ((reset == 0)) begin
        spiSlave_reg <= 0;
    end
    else begin
        if ((cs == 0)) begin
            spiSlave_reg <= {spiSlave_reg[(48 - 1)-1:0], spiSlave_sample};
        end
    end
end


always @(posedge scl, negedge reset) begin: CHAIN0CTL_SPISLAVE_SAMPLEINPUT
    if ((reset == 0)) begin
        spiSlave_sample <= 0;
    end
    else begin
        spiSlave_sample <= din;
    end
end



assign dout = spiSlave_reg[(48 - 1)];



assign txAn = tAn;
assign txAp = tAp;
assign txBn = tBn;
assign txBp = tBp;


always @(muxB_x) begin: CHAIN0CTL_MUXB_OUTPUTS
    tBn <= muxB_x;
    tBp <= (~muxB_x);
end


always @(cdata[38-1:32]) begin: CHAIN0CTL_MUXB_LOGIC
    case (cdata[38-1:32])
        0: muxB_x = 1;
        1: muxB_x = 2;
        2: muxB_x = 4;
        3: muxB_x = 8;
        4: muxB_x = 16;
        5: muxB_x = 32;
        6: muxB_x = 64;
        7: muxB_x = 128;
        8: muxB_x = 256;
        9: muxB_x = 512;
        10: muxB_x = 1024;
        11: muxB_x = 2048;
        12: muxB_x = 4096;
        13: muxB_x = 8192;
        14: muxB_x = 16384;
        15: muxB_x = 32768;
        16: muxB_x = 65536;
        17: muxB_x = 131072;
        18: muxB_x = 262144;
        19: muxB_x = 524288;
        20: muxB_x = 1048576;
        21: muxB_x = 2097152;
        22: muxB_x = 4194304;
        23: muxB_x = 8388608;
        24: muxB_x = 16777216;
        25: muxB_x = 33554432;
        26: muxB_x = 67108864;
        27: muxB_x = 134217728;
        28: muxB_x = 268435456;
        29: muxB_x = 536870912;
        30: muxB_x = 32'd1073741824;
        31: muxB_x = 33'd2147483648;
        32: muxB_x = 34'd4294967296;
        33: muxB_x = 35'd8589934592;
        34: muxB_x = 36'd17179869184;
        35: muxB_x = 37'd34359738368;
        36: muxB_x = 38'd68719476736;
        37: muxB_x = 39'd137438953472;
        38: muxB_x = 40'd274877906944;
        39: muxB_x = 41'd549755813888;
        40: muxB_x = 42'd1099511627776;
        41: muxB_x = 43'd2199023255552;
        42: muxB_x = 44'd4398046511104;
        43: muxB_x = 45'd8796093022208;
        44: muxB_x = 46'd17592186044416;
        45: muxB_x = 47'd35184372088832;
        46: muxB_x = 48'd70368744177664;
        47: muxB_x = 49'd140737488355328;
        48: muxB_x = 50'd281474976710656;
        49: muxB_x = 0;
        50: muxB_x = 0;
        51: muxB_x = 0;
        52: muxB_x = 0;
        53: muxB_x = 0;
        54: muxB_x = 0;
        55: muxB_x = 0;
        56: muxB_x = 0;
        57: muxB_x = 0;
        58: muxB_x = 0;
        59: muxB_x = 0;
        60: muxB_x = 0;
        61: muxB_x = 0;
        62: muxB_x = 0;
        default: muxB_x = 0;
    endcase
end


always @(muxA_x) begin: CHAIN0CTL_MUXA_OUTPUTS
    tAn <= muxA_x;
    tAp <= (~muxA_x);
end


always @(cdata[46-1:40]) begin: CHAIN0CTL_MUXA_LOGIC
    case (cdata[46-1:40])
        0: muxA_x = 1;
        1: muxA_x = 2;
        2: muxA_x = 4;
        3: muxA_x = 8;
        4: muxA_x = 16;
        5: muxA_x = 32;
        6: muxA_x = 64;
        7: muxA_x = 128;
        8: muxA_x = 256;
        9: muxA_x = 512;
        10: muxA_x = 1024;
        11: muxA_x = 2048;
        12: muxA_x = 4096;
        13: muxA_x = 8192;
        14: muxA_x = 16384;
        15: muxA_x = 32768;
        16: muxA_x = 65536;
        17: muxA_x = 131072;
        18: muxA_x = 262144;
        19: muxA_x = 524288;
        20: muxA_x = 1048576;
        21: muxA_x = 2097152;
        22: muxA_x = 4194304;
        23: muxA_x = 8388608;
        24: muxA_x = 16777216;
        25: muxA_x = 33554432;
        26: muxA_x = 67108864;
        27: muxA_x = 134217728;
        28: muxA_x = 268435456;
        29: muxA_x = 536870912;
        30: muxA_x = 32'd1073741824;
        31: muxA_x = 33'd2147483648;
        32: muxA_x = 34'd4294967296;
        33: muxA_x = 35'd8589934592;
        34: muxA_x = 36'd17179869184;
        35: muxA_x = 37'd34359738368;
        36: muxA_x = 38'd68719476736;
        37: muxA_x = 39'd137438953472;
        38: muxA_x = 40'd274877906944;
        39: muxA_x = 41'd549755813888;
        40: muxA_x = 42'd1099511627776;
        41: muxA_x = 43'd2199023255552;
        42: muxA_x = 44'd4398046511104;
        43: muxA_x = 45'd8796093022208;
        44: muxA_x = 46'd17592186044416;
        45: muxA_x = 47'd35184372088832;
        46: muxA_x = 48'd70368744177664;
        47: muxA_x = 49'd140737488355328;
        48: muxA_x = 50'd281474976710656;
        49: muxA_x = 0;
        50: muxA_x = 0;
        51: muxA_x = 0;
        52: muxA_x = 0;
        53: muxA_x = 0;
        54: muxA_x = 0;
        55: muxA_x = 0;
        56: muxA_x = 0;
        57: muxA_x = 0;
        58: muxA_x = 0;
        59: muxA_x = 0;
        60: muxA_x = 0;
        61: muxA_x = 0;
        62: muxA_x = 0;
        default: muxA_x = 0;
    endcase
end


always @(cdata[32-1:29]) begin: CHAIN0CTL_BUFSWCTLA_LOGIC
    case (cdata[32-1:29])
        0: sA = 10;
        1: sA = 10;
        2: sA = 9;
        3: sA = 9;
        4: sA = 6;
        5: sA = 6;
        6: sA = 5;
        default: sA = 5;
    endcase
end



assign swAn = sA;
assign swAp = (~sA);
assign swBn = sB;
assign swBp = (~sB);
assign fastAn = cdata[28];
assign fastAp = (!cdata[28]);
assign fastBn = cdata[12];
assign fastBp = (!cdata[12]);
assign tuneAn = cdata[28-1:16];
assign tuneAp = (~cdata[28-1:16]);
assign tuneBn = cdata[12-1:0];
assign tuneBp = (~cdata[12-1:0]);

endmodule
